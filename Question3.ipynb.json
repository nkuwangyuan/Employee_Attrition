{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/weight_boosting.py:29: DeprecationWarning: numpy.core.umath_tests is an internal NumPy module and should not be imported. It will be removed in a future NumPy release.\n",
      "  from numpy.core.umath_tests import inner1d\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script><script>requirejs.config({paths: { 'plotly': ['https://cdn.plot.ly/plotly-latest.min']},});if(!window._Plotly) {require(['plotly'],function(plotly) {window._Plotly=plotly;});}</script>"
      ],
      "text/vnd.plotly.v1+html": [
       "<script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script><script>requirejs.config({paths: { 'plotly': ['https://cdn.plot.ly/plotly-latest.min']},});if(!window._Plotly) {require(['plotly'],function(plotly) {window._Plotly=plotly;});}</script>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Package\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "\n",
    "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "from sklearn.ensemble import AdaBoostClassifier\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "import plotly.offline as py\n",
    "py.init_notebook_mode(connected=True)\n",
    "import plotly.graph_objs as go\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1470 entries, 0 to 1469\n",
      "Data columns (total 35 columns):\n",
      "Age                         1470 non-null int64\n",
      "Attrition                   1470 non-null object\n",
      "BusinessTravel              1470 non-null object\n",
      "DailyRate                   1470 non-null int64\n",
      "Department                  1470 non-null object\n",
      "DistanceFromHome            1470 non-null int64\n",
      "Education                   1470 non-null int64\n",
      "EducationField              1470 non-null object\n",
      "EmployeeCount               1470 non-null int64\n",
      "EmployeeNumber              1470 non-null int64\n",
      "EnvironmentSatisfaction     1470 non-null int64\n",
      "Gender                      1470 non-null object\n",
      "HourlyRate                  1470 non-null int64\n",
      "JobInvolvement              1470 non-null int64\n",
      "JobLevel                    1470 non-null int64\n",
      "JobRole                     1470 non-null object\n",
      "JobSatisfaction             1470 non-null int64\n",
      "MaritalStatus               1470 non-null object\n",
      "MonthlyIncome               1470 non-null int64\n",
      "MonthlyRate                 1470 non-null int64\n",
      "NumCompaniesWorked          1470 non-null int64\n",
      "Over18                      1470 non-null object\n",
      "OverTime                    1470 non-null object\n",
      "PercentSalaryHike           1470 non-null int64\n",
      "PerformanceRating           1470 non-null int64\n",
      "RelationshipSatisfaction    1470 non-null int64\n",
      "StandardHours               1470 non-null int64\n",
      "StockOptionLevel            1470 non-null int64\n",
      "TotalWorkingYears           1470 non-null int64\n",
      "TrainingTimesLastYear       1470 non-null int64\n",
      "WorkLifeBalance             1470 non-null int64\n",
      "YearsAtCompany              1470 non-null int64\n",
      "YearsInCurrentRole          1470 non-null int64\n",
      "YearsSinceLastPromotion     1470 non-null int64\n",
      "YearsWithCurrManager        1470 non-null int64\n",
      "dtypes: int64(26), object(9)\n",
      "memory usage: 402.0+ KB\n"
     ]
    }
   ],
   "source": [
    "# Data\n",
    "\n",
    "data = pd.read_csv('WA_Fn-UseC_-HR-Employee-Attrition.csv')\n",
    "data.info()\n",
    "data = data.drop(columns = ['DailyRate','EmployeeCount','EmployeeNumber','HourlyRate','JobInvolvement','MonthlyRate','Over18','PercentSalaryHike','TrainingTimesLastYear','YearsWithCurrManager'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Year at Company Distribution\n",
    "\n",
    "Attrition_by_Year = pd.DataFrame(pd.crosstab(data['YearsAtCompany'],data['Attrition'])).reset_index()\n",
    "Attrition_by_Year['Attr%'] = Attrition_by_Year['Yes'] / (Attrition_by_Year['Yes'] + Attrition_by_Year['No']) * 100\n",
    "Attrition_by_Year = Attrition_by_Year.sort_values(by = ['YearsAtCompany'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "linkText": "Export to plot.ly",
        "plotlyServerURL": "https://plot.ly",
        "showLink": false
       },
       "data": [
        {
         "marker": {
          "color": "rgb(49,130,189)"
         },
         "name": "Yes",
         "type": "bar",
         "uid": "0cde180b-a0df-4c0a-a58b-0abfe698299e",
         "x": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          27,
          29,
          30,
          31,
          32,
          33,
          34,
          36,
          37,
          40
         ],
         "y": [
          16,
          59,
          27,
          20,
          19,
          21,
          9,
          11,
          9,
          8,
          18,
          2,
          0,
          2,
          2,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0,
          0,
          0,
          0,
          0,
          1,
          1,
          1,
          0,
          0,
          0,
          1
         ]
        },
        {
         "marker": {
          "color": "rgb(204,204,204)"
         },
         "name": "No",
         "type": "bar",
         "uid": "6751814e-6a8b-44bc-b7ad-25c2ebcf5c18",
         "x": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          27,
          29,
          30,
          31,
          32,
          33,
          34,
          36,
          37,
          40
         ],
         "y": [
          28,
          112,
          100,
          108,
          91,
          175,
          67,
          79,
          71,
          74,
          102,
          30,
          14,
          22,
          16,
          19,
          11,
          8,
          12,
          10,
          26,
          13,
          14,
          1,
          5,
          4,
          4,
          2,
          2,
          1,
          2,
          2,
          4,
          1,
          2,
          1,
          0
         ]
        },
        {
         "marker": {
          "color": "red"
         },
         "name": "Attr%",
         "type": "scatter",
         "uid": "30eba47c-5634-4058-83c9-49685d2331ce",
         "x": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          27,
          29,
          30,
          31,
          32,
          33,
          34,
          36,
          37,
          40
         ],
         "y": [
          36.36363636363637,
          34.50292397660819,
          21.25984251968504,
          15.625,
          17.272727272727273,
          10.714285714285714,
          11.842105263157894,
          12.222222222222221,
          11.25,
          9.75609756097561,
          15,
          6.25,
          0,
          8.333333333333332,
          11.11111111111111,
          5,
          8.333333333333332,
          11.11111111111111,
          7.6923076923076925,
          9.090909090909092,
          3.7037037037037033,
          7.142857142857142,
          6.666666666666667,
          50,
          16.666666666666664,
          0,
          0,
          0,
          0,
          0,
          33.33333333333333,
          33.33333333333333,
          20,
          0,
          0,
          0,
          100
         ],
         "yaxis": "y2"
        }
       ],
       "layout": {
        "legend": {
         "x": 0.8,
         "y": 1
        },
        "title": {
         "text": "YearsAtCompany"
        },
        "xaxis": {
         "range": [
          0,
          20
         ]
        },
        "yaxis": {
         "range": [
          0,
          200
         ],
         "title": {
          "text": "Count"
         }
        },
        "yaxis2": {
         "anchor": "x",
         "overlaying": "y",
         "range": [
          0,
          50
         ],
         "showgrid": false,
         "side": "right",
         "title": {
          "text": "% Attrition"
         },
         "zeroline": false
        }
       }
      },
      "text/html": [
       "<div id=\"1a8496e7-9ea5-4561-aa78-6dfb4dcf122e\" style=\"height: 525px; width: 100%;\" class=\"plotly-graph-div\"></div><script type=\"text/javascript\">require([\"plotly\"], function(Plotly) { window.PLOTLYENV=window.PLOTLYENV || {};window.PLOTLYENV.BASE_URL=\"https://plot.ly\";Plotly.newPlot(\"1a8496e7-9ea5-4561-aa78-6dfb4dcf122e\", [{\"marker\": {\"color\": \"rgb(49,130,189)\"}, \"name\": \"Yes\", \"x\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 36, 37, 40], \"y\": [16, 59, 27, 20, 19, 21, 9, 11, 9, 8, 18, 2, 0, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], \"type\": \"bar\", \"uid\": \"0cde180b-a0df-4c0a-a58b-0abfe698299e\"}, {\"marker\": {\"color\": \"rgb(204,204,204)\"}, \"name\": \"No\", \"x\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 36, 37, 40], \"y\": [28, 112, 100, 108, 91, 175, 67, 79, 71, 74, 102, 30, 14, 22, 16, 19, 11, 8, 12, 10, 26, 13, 14, 1, 5, 4, 4, 2, 2, 1, 2, 2, 4, 1, 2, 1, 0], \"type\": \"bar\", \"uid\": \"6751814e-6a8b-44bc-b7ad-25c2ebcf5c18\"}, {\"marker\": {\"color\": \"red\"}, \"name\": \"Attr%\", \"x\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 36, 37, 40], \"y\": [36.36363636363637, 34.50292397660819, 21.25984251968504, 15.625, 17.272727272727273, 10.714285714285714, 11.842105263157894, 12.222222222222221, 11.25, 9.75609756097561, 15.0, 6.25, 0.0, 8.333333333333332, 11.11111111111111, 5.0, 8.333333333333332, 11.11111111111111, 7.6923076923076925, 9.090909090909092, 3.7037037037037033, 7.142857142857142, 6.666666666666667, 50.0, 16.666666666666664, 0.0, 0.0, 0.0, 0.0, 0.0, 33.33333333333333, 33.33333333333333, 20.0, 0.0, 0.0, 0.0, 100.0], \"yaxis\": \"y2\", \"type\": \"scatter\", \"uid\": \"30eba47c-5634-4058-83c9-49685d2331ce\"}], {\"legend\": {\"x\": 0.8, \"y\": 1}, \"title\": {\"text\": \"YearsAtCompany\"}, \"xaxis\": {\"range\": [0, 20]}, \"yaxis\": {\"range\": [0, 200], \"title\": {\"text\": \"Count\"}}, \"yaxis2\": {\"anchor\": \"x\", \"overlaying\": \"y\", \"range\": [0, 50], \"showgrid\": false, \"side\": \"right\", \"title\": {\"text\": \"% Attrition\"}, \"zeroline\": false}}, {\"showLink\": false, \"linkText\": \"Export to plot.ly\", \"plotlyServerURL\": \"https://plot.ly\"})});</script><script type=\"text/javascript\">window.addEventListener(\"resize\", function(){window._Plotly.Plots.resize(document.getElementById(\"1a8496e7-9ea5-4561-aa78-6dfb4dcf122e\"));});</script>"
      ],
      "text/vnd.plotly.v1+html": [
       "<div id=\"1a8496e7-9ea5-4561-aa78-6dfb4dcf122e\" style=\"height: 525px; width: 100%;\" class=\"plotly-graph-div\"></div><script type=\"text/javascript\">require([\"plotly\"], function(Plotly) { window.PLOTLYENV=window.PLOTLYENV || {};window.PLOTLYENV.BASE_URL=\"https://plot.ly\";Plotly.newPlot(\"1a8496e7-9ea5-4561-aa78-6dfb4dcf122e\", [{\"marker\": {\"color\": \"rgb(49,130,189)\"}, \"name\": \"Yes\", \"x\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 36, 37, 40], \"y\": [16, 59, 27, 20, 19, 21, 9, 11, 9, 8, 18, 2, 0, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1], \"type\": \"bar\", \"uid\": \"0cde180b-a0df-4c0a-a58b-0abfe698299e\"}, {\"marker\": {\"color\": \"rgb(204,204,204)\"}, \"name\": \"No\", \"x\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 36, 37, 40], \"y\": [28, 112, 100, 108, 91, 175, 67, 79, 71, 74, 102, 30, 14, 22, 16, 19, 11, 8, 12, 10, 26, 13, 14, 1, 5, 4, 4, 2, 2, 1, 2, 2, 4, 1, 2, 1, 0], \"type\": \"bar\", \"uid\": \"6751814e-6a8b-44bc-b7ad-25c2ebcf5c18\"}, {\"marker\": {\"color\": \"red\"}, \"name\": \"Attr%\", \"x\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 36, 37, 40], \"y\": [36.36363636363637, 34.50292397660819, 21.25984251968504, 15.625, 17.272727272727273, 10.714285714285714, 11.842105263157894, 12.222222222222221, 11.25, 9.75609756097561, 15.0, 6.25, 0.0, 8.333333333333332, 11.11111111111111, 5.0, 8.333333333333332, 11.11111111111111, 7.6923076923076925, 9.090909090909092, 3.7037037037037033, 7.142857142857142, 6.666666666666667, 50.0, 16.666666666666664, 0.0, 0.0, 0.0, 0.0, 0.0, 33.33333333333333, 33.33333333333333, 20.0, 0.0, 0.0, 0.0, 100.0], \"yaxis\": \"y2\", \"type\": \"scatter\", \"uid\": \"30eba47c-5634-4058-83c9-49685d2331ce\"}], {\"legend\": {\"x\": 0.8, \"y\": 1}, \"title\": {\"text\": \"YearsAtCompany\"}, \"xaxis\": {\"range\": [0, 20]}, \"yaxis\": {\"range\": [0, 200], \"title\": {\"text\": \"Count\"}}, \"yaxis2\": {\"anchor\": \"x\", \"overlaying\": \"y\", \"range\": [0, 50], \"showgrid\": false, \"side\": \"right\", \"title\": {\"text\": \"% Attrition\"}, \"zeroline\": false}}, {\"showLink\": false, \"linkText\": \"Export to plot.ly\", \"plotlyServerURL\": \"https://plot.ly\"})});</script><script type=\"text/javascript\">window.addEventListener(\"resize\", function(){window._Plotly.Plots.resize(document.getElementById(\"1a8496e7-9ea5-4561-aa78-6dfb4dcf122e\"));});</script>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Year Distribution Plot\n",
    "\n",
    "tmp = Attrition_by_Year\n",
    "var = 'YearsAtCompany'\n",
    "\n",
    "trace1 = go.Bar(\n",
    "    x=tmp[var],\n",
    "    y=tmp['Yes'],\n",
    "    name='Yes',\n",
    "    marker=dict(color='rgb(49,130,189)')\n",
    ")\n",
    "\n",
    "trace2 = go.Bar(\n",
    "    x=tmp[var],\n",
    "    y=tmp['No'],\n",
    "    name='No',\n",
    "    marker=dict(color='rgb(204,204,204)')\n",
    ")\n",
    "\n",
    "trace3 = go.Scatter(\n",
    "    x=tmp[var],\n",
    "    y=tmp['Attr%'],\n",
    "    name='Attr%',\n",
    "    yaxis = 'y2',\n",
    "    marker=dict(color='red'),\n",
    ")\n",
    "\n",
    "layout = dict(\n",
    "    title = str(var),\n",
    "    xaxis=dict(range= [-0, 20]),\n",
    "    yaxis=dict(range= [-0, 200],\n",
    "               title= 'Count'), \n",
    "    yaxis2=dict(range= [-0, 50],\n",
    "                overlaying= 'y',\n",
    "                anchor= 'x',\n",
    "                side= 'right',\n",
    "                zeroline=False,\n",
    "                showgrid= False,\n",
    "                title= '% Attrition'),\n",
    "    legend=dict(x=0.8,y=1,))\n",
    "\n",
    "data_fig = [trace1, trace2, trace3]\n",
    "fig = go.Figure(data=data_fig, layout=layout)\n",
    "py.iplot(fig, filename = var)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Data Preparation\n",
    "\n",
    "# Categorical columns\n",
    "cat_cols   = data.nunique()[data.nunique() < 10].keys().tolist()\n",
    "cat_cols   = [x for x in cat_cols if x not in [\"Attrition\"]]\n",
    "num_cols   = [x for x in data.columns if x not in cat_cols + [\"Attrition\"] + ['EmployeeNumber']]\n",
    "bin_cols   = data.nunique()[data.nunique() == 2].keys().tolist()\n",
    "multi_cols = [i for i in cat_cols if i not in bin_cols]\n",
    "\n",
    "# Label encoding\n",
    "le = LabelEncoder()\n",
    "for i in bin_cols :\n",
    "    data[i] = le.fit_transform(data[i])\n",
    "data = pd.get_dummies(data = data,columns = multi_cols )\n",
    "\n",
    "# Scale columns\n",
    "std = StandardScaler()\n",
    "scaled = std.fit_transform(data[num_cols])\n",
    "scaled = pd.DataFrame(scaled,columns=num_cols)\n",
    "\n",
    "df_data_og = data.copy()\n",
    "data = data.drop(columns = num_cols,axis = 1)\n",
    "data = data.merge(scaled,left_index=True,right_index=True,how = \"left\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: FutureWarning:\n",
      "\n",
      "Method .as_matrix will be removed in a future version. Use .values instead.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# AdaBoost Classification\n",
    "\n",
    "y = np.array(data.Attrition.tolist())\n",
    "data = data.drop('Attrition', 1)\n",
    "X = np.array(data.as_matrix())\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 42)\n",
    "\n",
    "bdt = AdaBoostClassifier(DecisionTreeClassifier(max_depth=1), algorithm=\"SAMME\", n_estimators=200)\n",
    "dbt_clf = bdt.fit(X_train, y_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x1080 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Feature Importance Plot\n",
    "\n",
    "def plot_feature_importance(model):\n",
    "    tmp = pd.DataFrame({'Feature': list(data), 'Feature importance': model.feature_importances_})\n",
    "    tmp = tmp.sort_values(by='Feature importance',ascending=False).head(30)\n",
    "    plt.figure(figsize = (10,15))\n",
    "    plt.title('Features Importance',fontsize=14)\n",
    "    s = sns.barplot(y='Feature',x='Feature importance',data=tmp, orient='h', palette=\"Blues_d\")\n",
    "    s.set_xticklabels(s.get_xticklabels(),rotation=90)\n",
    "    plt.savefig('Feature_Importance.png')\n",
    "    plt.show()\n",
    "    \n",
    "plot_feature_importance(dbt_clf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
